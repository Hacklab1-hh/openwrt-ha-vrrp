#!/bin/sh
set -eu
CFG="/etc/keepalived/keepalived.conf"

EN="$(uci -q get ha_vrrp.core.enabled || echo 1)"
[ "$EN" = "1" ] || { echo "[ha-vrrp] disabled"; exit 0; }

CL="$(uci -q get ha_vrrp.core.cluster_name || echo lab-ha)"
PASS="$(uci -q get ha_vrrp.core.auth_pass || echo changeme-please)"

# Health v4
HINT="$(uci -q show ha_vrrp | awk -F= '/^ha_vrrp.core.health_wan_if=/ {gsub(/'\''/,"",$2); print $2}')"
HINT_INT="$(uci -q get ha_vrrp.core.health_interval || echo 2)"
HINT_FALL="$(uci -q get ha_vrrp.core.health_fall || echo 2)"
HINT_RISE="$(uci -q get ha_vrrp.core.health_rise || echo 2)"
HINT_WEIGHT="$(uci -q get ha_vrrp.core.health_weight || echo -30)"

# Health v6
H6INT="$(uci -q show ha_vrrp | awk -F= '/^ha_vrrp.core.health_wan6_if=/ {gsub(/'\''/,"",$2); print $2}')"
H6_INT="$(uci -q get ha_vrrp.core.health6_interval || echo 3)"
H6_FALL="$(uci -q get ha_vrrp.core.health6_fall || echo 2)"
H6_RISE="$(uci -q get ha_vrrp.core.health6_rise || echo 2)"
H6_WEIGHT="$(uci -q get ha_vrrp.core.health6_weight || echo -20)"

cat > "$CFG" <<EOF
# AUTOGENERATED by ha-vrrp-apply â€“ DO NOT EDIT
global_defs {
  router_id ${CL}
  enable_script_security
  script_user root
}
EOF

for IF in $HINT; do
cat >> "$CFG" <<EOF

vrrp_script CHK_WAN_${IF} {
  script "/usr/libexec/ha-vrrp/check_wan_gw.sh ${IF}"
  interval ${HINT_INT}
  fall ${HINT_FALL}
  rise ${HINT_RISE}
  weight ${HINT_WEIGHT}
}
EOF
done

for IF in $H6INT; do
cat >> "$CFG" <<EOF

vrrp_script CHK_WAN6_${IF} {
  script "/usr/libexec/ha-vrrp/check_wan6_gw.sh ${IF}"
  interval ${H6_INT}
  fall ${H6_FALL}
  rise ${H6_RISE}
  weight ${H6_WEIGHT}
}
EOF
done

render_instance() {
  local sec="$1"
  local NAME VRID PRIO STATE ADV PREEMPT
  local IFACE USE_VLAN VLAN_ID DEV
  local VIP_CIDR SRC_IP NOTIFY_MASTER NOTIFY_BACKUP PEERS VIPS

  NAME="$(uci -q get ha_vrrp.$sec.name || echo $sec)"
  VRID="$(uci -q get ha_vrrp.$sec.vrid || echo 42)"
  PRIO="$(uci -q get ha_vrrp.$sec.priority || echo 100)"
  STATE="$(uci -q get ha_vrrp.$sec.state || echo BACKUP)"
  ADV="$(uci -q get ha_vrrp.$sec.advert_int || echo 1)"
  PREEMPT="$(uci -q get ha_vrrp.$sec.preempt || echo 1)"

  IFACE="$(uci -q get ha_vrrp.$sec.iface || echo wan)"
  USE_VLAN="$(uci -q get ha_vrrp.$sec.use_vlan || echo 0)"
  VLAN_ID="$(uci -q get ha_vrrp.$sec.vlan_id || echo)"
  DEV="$IFACE"; [ "$USE_VLAN" = "1" ] && [ -n "$VLAN_ID" ] && DEV="${IFACE}.${VLAN_ID}"

  VIP_CIDR="$(uci -q get ha_vrrp.$sec.vip_cidr || echo)"
  VIPS="$(uci -q show ha_vrrp | awk -v s="$sec" -F= '$1 ~ "^ha_vrrp\\."s"\\.vip_list" {gsub(/'\''/,"",$2); print $2}')"
  SRC_IP="$(uci -q get ha_vrrp.$sec.unicast_src_ip || echo)"
  [ -n "$SRC_IP" ] || { echo "[ha-vrrp] ERROR: $sec: unicast_src_ip missing"; exit 1; }

  NOTIFY_MASTER="$(uci -q get ha_vrrp.$sec.notify_master || echo /usr/libexec/ha-vrrp/notify_master.sh)"
  NOTIFY_BACKUP="$(uci -q get ha_vrrp.$sec.notify_backup || echo /usr/libexec/ha-vrrp/notify_backup.sh)"
  PEERS="$(uci -q show ha_vrrp | awk -v s="$sec" -F= '$1 ~ "^ha_vrrp\\."s"\\.unicast_peer" {gsub(/'\''/,"",$2); print $2}')"

  {
    echo
    echo "vrrp_instance ${NAME}_VI_${VRID} {"
    echo "  state ${STATE}"
    echo "  interface ${DEV}"
    echo "  virtual_router_id ${VRID}"
    echo "  priority ${PRIO}"
    echo "  advert_int ${ADV}"
    echo "  garp_master_delay 1"
    echo "  garp_master_repeat 3"
    [ "$PREEMPT" = "0" ] && echo "  nopreempt"
    cat <<EOT
  authentication {
    auth_type PASS
    auth_pass ${PASS}
  }

  unicast_src_ip ${SRC_IP}
  unicast_peer {
EOT
    for P in $PEERS; do echo "    ${P}"; done
    cat <<EOT
  }
EOT
    echo
    echo "  virtual_ipaddress {"
    if [ -n "$VIP_CIDR" ]; then echo "    ${VIP_CIDR}"; fi
    for V in $VIPS; do echo "    ${V}"; done
    echo "  }"

    if [ -n "$HINT$H6INT" ]; then
      echo "  track_script {"
      for IF in $HINT; do echo "    CHK_WAN_${IF}"; done
      for IF in $H6INT; do echo "    CHK_WAN6_${IF}"; done
      echo "  }"
    fi

    cat <<EOT

  notify_master "${NOTIFY_MASTER}"
  notify_backup "${NOTIFY_BACKUP}"
}
EOT
  } >> "$CFG"
}

INSTANCES="$(uci -q show ha_vrrp | awk -F. '/^ha_vrrp\\.[^=]+=/ {print $2}' | cut -d= -f1 | sort -u | grep -E '^inst_' || true)"

# 0.2.0 backward-compat: if no explicit instances exist, render from core.* fields if present
if [ -z "$INSTANCES" ]; then
  if uci -q get ha_vrrp.core.vip_cidr >/dev/null 2>&1 || uci -q get ha_vrrp.core.unicast_src_ip >/dev/null 2>&1; then
    render_instance "core"
  else
    echo "[ha-vrrp] no instances defined"
  fi
else
  for s in $INSTANCES; do render_instance "$s"; done
fi
